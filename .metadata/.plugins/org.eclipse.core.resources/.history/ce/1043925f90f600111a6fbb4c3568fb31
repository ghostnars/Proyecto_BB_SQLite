package mypackage;

import java.util.Vector;

import net.rim.device.api.database.Cursor;
import net.rim.device.api.database.Database;
import net.rim.device.api.database.DatabaseFactory;
import net.rim.device.api.database.Row;
import net.rim.device.api.database.Statement;
import net.rim.device.api.io.URI;
import net.rim.device.api.system.Bitmap;
import net.rim.device.api.ui.Color;
import net.rim.device.api.ui.Field;
import net.rim.device.api.ui.FieldChangeListener;
import net.rim.device.api.ui.MenuItem;
import net.rim.device.api.ui.TransitionContext;
import net.rim.device.api.ui.Ui;
import net.rim.device.api.ui.UiEngineInstance;
import net.rim.device.api.ui.XYEdges;
import net.rim.device.api.ui.component.BasicEditField;
import net.rim.device.api.ui.component.BitmapField;
import net.rim.device.api.ui.component.Dialog;
import net.rim.device.api.ui.component.EditField;
import net.rim.device.api.ui.component.LabelField;
import net.rim.device.api.ui.container.HorizontalFieldManager;
import net.rim.device.api.ui.decor.BackgroundFactory;
import net.rim.device.api.ui.decor.BorderFactory;
import estilos.BitmapButtonField;


public class notaLista extends Metodos implements FieldChangeListener {
	BasicEditField nota;
	EditField efTitulo;	
	Vector idApunte = new Vector();
	Vector Prioridad = new Vector();
	Config path = new Config();
	Config selecttitulo = new Config();
	int idMateria;
	Vector bb = new Vector();
	Vector Codigo = new Vector();
	String val;
	String mensaje;
	Bitmap tagBitmap;
	String direccion;
    public notaLista(int id_materia)
    { 
    	 idMateria = id_materia;
    	 getMainManager().setBackground(BackgroundFactory.createLinearGradientBackground(Color.BLACK, Color.BLACK,Color.BLACK,Color.BLACK));
  		
    	 try{
         	URI uri1 = URI.create(path.Path());
         	Database sqliteDB1 = DatabaseFactory.open(uri1);
             Statement se1 = sqliteDB1.createStatement("SELECT nombre_materia FROM MATERIA WHERE id_materia ="+idMateria);
             se1.prepare();
             Cursor c1 = se1.getCursor();
             Row r1;
            
             
             while(c1.next()){
                 r1 = c1.getRow();
                 setTitle(r1.getString(0));
             }
             
             se1.close();
             sqliteDB1.close();

    	   }catch (Exception e){
    	         Dialog.alert("error al hacer la lista "+e.getMessage().toString());
    	         e.printStackTrace();
    	         } 
         
    	 
         try{
         	URI uri = URI.create(path.Path());
         	Database sqliteDB = DatabaseFactory.open(uri);

                 Statement se = sqliteDB.createStatement(selecttitulo.SelectTitulo()+idMateria+"");
                 
                 se.prepare();
                 Cursor c = se.getCursor();
                 
                 Row r;
                 int i = 0;
                 
                 while(c.next()) 
                 {
                     r = c.getRow();
                     
 					

 					bb.addElement(new BitmapButtonField(Bitmap.getBitmapResource("flecha.png"), Bitmap.getBitmapResource("flecha1.png"), BitmapButtonField.FIELD_LEFT | BitmapButtonField.FIELD_VCENTER));
 					((Field) bb.elementAt(i)).setChangeListener(this);
 					((Field) bb.elementAt(i)).setMargin(0, 0, 0, 0);
 					
 					//ASIGNA TEXTO AL EL ELEMENTO DE LISTA
 					
 					
 						
 						val=r.getString(2);
 						if (val.equals("Alta")){
 							direccion="tagAlta.png";				
 							}else if(val.equals("Media")){
 								direccion = "tagMedia.png";
 								}else if(val.equals("Baja")){
 									direccion = "tagBaja.png"; 
 									}
 						 tagBitmap = Bitmap.getBitmapResource(direccion);
 				        BitmapField bfTag = new BitmapField(tagBitmap, Field.FIELD_VCENTER);
 						
 					WLabelField text = new WLabelField(r.getString(0));
 					text.setMargin(0, 5, 0, 5);
 					idApunte.addElement(""+r.getInteger(1));
 					
 					
 					//CREAR ELEMENTO DE LISTA
 			    	Bitmap elementoBitmap = Bitmap.getBitmapResource("fondomaterias.png");
 					HorizontalFieldManager elementolista = new HorizontalFieldManager(Field.USE_ALL_WIDTH);
 					elementolista.setBorder(BorderFactory.createBitmapBorder(new XYEdges(1,1,1,1), elementoBitmap));
 					
 					//AGREGAR A PANTALLA CADA ELEMENTO		
 					elementolista.setMargin(3,5,3,5);
 					elementolista.add((Field)bb.elementAt(i));
 					elementolista.add(text);
 					elementolista.add(bfTag);
 					add(elementolista);		
 					
                     i++;
                 }
                 se.close();
                 sqliteDB.close();
                 
       
               if(i==0){
                WLabelField nohay = new WLabelField("No hay ninguna nota aun!\n\n"
                 +"Para crear una nota \n"
                 +"precione menú y eliga \n"
                 +"'Nuevo Apunte'");
                 
                	 nohay.setMargin(30,0,0,65);
  					add(nohay);
                 }
     		
         }catch (Exception e){
         Dialog.alert("error al hacer la lista "+e.getMessage().toString());
         e.printStackTrace();
         }   
    	

    	 
	   
	   	
    	MenuItem mymenu = new MenuItem("Nuevo Apunte" , 100, 10){
    	    public void run(){
    	       
    	    	openScreen(new notaCrear(idMateria));
    	       
    	    }
    	};
        
    	addMenuItem(mymenu);
}
	public void fieldChanged(Field field, int context) {
		// TODO Auto-generated method stub
		for(int j=0;j<=bb.size()-1;j++){
			if( bb.elementAt(j)== field ){
				TransitionContext transition = new TransitionContext(TransitionContext.TRANSITION_SLIDE);
				transition.setIntAttribute(TransitionContext.ATTR_DURATION, 500);
				transition.setIntAttribute(TransitionContext.ATTR_DIRECTION, TransitionContext.DIRECTION_LEFT);
				transition.setIntAttribute(TransitionContext.ATTR_STYLE, TransitionContext.STYLE_PUSH);
				
				UiEngineInstance engine = Ui.getUiEngineInstance();
				engine.setTransition(this, null, UiEngineInstance.TRIGGER_PUSH, transition);
				
				openScreen(new notaModificar(idMateria,(String) idApunte.elementAt(j)));
			}
		}
		
	}
	
	public boolean onClose() {
		//force the app to quit
		 TransitionContext transition = new TransitionContext(TransitionContext.TRANSITION_SLIDE);
	        transition.setIntAttribute(TransitionContext.ATTR_DURATION, 500);
	        transition.setIntAttribute(TransitionContext.ATTR_DIRECTION, TransitionContext.DIRECTION_RIGHT);
	        transition.setIntAttribute(TransitionContext.ATTR_STYLE, TransitionContext.STYLE_PUSH);
	        
	        UiEngineInstance engine = Ui.getUiEngineInstance();
	        engine.setTransition(this, null, UiEngineInstance.TRIGGER_PUSH, transition);
		
		openScreen(new materiaLista());
		return true;
	}

}
